#!/usr/bin/env ruby
# encoding: utf-8
require File.expand_path '../../lib/flaky', __FILE__
usage_string = <<-'MSG'
flake [count] ios[test_name]

flake 1 ios[sign_in]
  Run the sign in test one time

flake 3 ios
  Run all iOS tests up to 3 times
  If one run passes or 3 runs fail, then we move onto the next test.

flake 3 ios files.txt
  Run select iOS tests in files.txt up to 3 times
  If one run passes or 3 runs fail, then we move onto the next test.
MSG

args = ARGV

video = args.index '--video'
if video != nil
  Flaky.no_video = false
  args.delete_at(video) # remove flag from args
else
  Flaky.no_video = true
end

Flaky.no_video = true if ENV['SAUCE_USERNAME'] && ENV['SAUCE_ACCESS_KEY']

puts "Recording Video: #{!Flaky.no_video}"

if args && args.length === 3
  # .to_i will convert any string to 0 so check using a match regex.
  if args[0].match(/\d+/) && args[1].match(/\d+/)
    raise 'First pass must be 1' unless args[0].to_i == 1
    # flake 1 2 ios
    pass_1 = args[0] # 1
    count = args[1] # 2
    os = args[2] # ios
    puts "Running all #{os} tests 1x #{count}x"
    Flaky.two_pass count: count, os: os
    exit
  else
    # rake 3 ios files.txt
    count = args.first
    os = args[1]
    file = args.last
    raise 'File must end in .txt' unless File.extname(args.last).downcase == '.txt'
    puts "Running select #{os} tests from file #{file} #{count}x"
    Flaky.run_from_file count: count, os: os, file: file
    exit
  end

else
  unless args && args.length === 2
    puts usage_string
    exit
  end
end

# flaky 1 ios[test_name]

count = args.first

last = args.last
single_test_match = last.match(/(.+)\[(.*)\]$/)
all_tests_match = last.match(/(.+)$/)

if single_test_match
  # we're not using full, however we have to capture it anyway.
  full, os, test_name = single_test_match.to_a # rake ios[Ok] => ["ios[Ok]", "ios", "Ok"]
  name = File.basename test_name, '.*'
  puts "Running #{name} #{count}x"
  Flaky.run_one_test count: count, os: os, name: test_name
  exit
elsif all_tests_match
  os = all_tests_match.to_a.last
  puts "Running all #{os} tests #{count}x"
  Flaky.run_all_tests count: count, os: os
  exit
else
  puts usage_string
  exit
end